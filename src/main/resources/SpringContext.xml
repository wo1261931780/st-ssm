<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!--这里主要是配置bean文件-->
	<!--需要配置的是实现类，因为要新建对象出来-->
	<!--<bean id="daoBeanXmlId" class="com.stssm.github.io.dao.impl.BookDaoImpl" scope="prototype">-->
	<!--注意一下，是否生成单例对象，是在dao的配置文件中设置的-->
	<!--默认scope中，是单例-->
	<!--如果修改，就可以生成不同的内存地址-->
	<!--ioc的单例模式，主要为了方便管理-->
	<!--但是，如果对象需要记录成员变量的属性值，那么就需要使用非单例的新建方式-->
	<!--这种带有属性值的，一般都带有一定的业务状态-->
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<bean id="daoBeanXmlId" name="daoBeanXmlName" class="com.stssm.github.io.dao.impl.BookDaoImpl" scope="prototype"
	      init-method="daoInit"
	      destroy-method="daoDestory">
		<!--上面是测试初始化和销毁的生命周期-->
		<!--一种方法是类似上面这样，直接使用xml配置对应的初始化-->
		<!--还有一种就是直接实现对应的接口，完成标准流程的初始化-->
	</bean>
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<!--这里新建出来的静态factory对象-->
	<bean name="staticFactoryDaoBean" class="com.stssm.github.io.factory.FactoryStaticDao" factory-method="getBookDao">
		<!--新建了工厂以后，还需要说明工厂的构造方法是什么-->
	</bean>
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<!--下面是实例工厂-->
	<bean id="factoryDaoBean" class="com.stssm.github.io.factory.FactoryDao"></bean>
	<!--首先要映射到工厂对象-->
	<!--然后工厂对象再次映射到具体对象的新建方法-->
	<bean name="factoryDaoBeanName" factory-bean="factoryDaoBean" factory-method="getBookDao"></bean>
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<bean id="serviceBeanXmlId" name="serviceBeanXmlName bookServiceEbi"
	      class="com.stssm.github.io.service.impl.BookServiceImpl">
		<!--name中设置的是变量的自定义名称-->
		<!--自定义名称可以多个，还可以同时生效-->
		<property name="xmlServiceDao" ref="daoBeanXmlId">
			<!--name表示我要设置的类名-->
			<!--具体指的是bbb002中，通过多态创建的对象，对象对应的名称-->
			<!--ref表示我参考的对象-->
			<!--这里指的是我上面创建的bean-->
		</property>
		<property name="xmlServiceDaoUser" ref="userDaoBeanXmlId"></property>
	</bean>
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->

	<bean id="userDaoBeanXmlId" name="userDaoBeanXmlName" class="com.stssm.github.io.dao.impl.userDaoImpl"
	      scope="prototype">
		<property name="nums" value="123"></property>
		<property name="resultStr" value="str123"></property>
		<!--这里是setter注入-->
		<!--直接根据设置的value，将数据传递过去-->
	</bean>
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<!--********************************************************************************************************-->
	<bean id="userDaoBeanXmlId"></bean>

	<bean id="userDao2BeanXmlId" name="userDao2BeanXmlName" class="com.stssm.github.io.dao.impl.userDaoImpl2"
	      scope="prototype">
		<constructor-arg name="nums" value="222"></constructor-arg>
		<constructor-arg name="resultStr" value="str222"></constructor-arg>
	</bean>


</beans>
