<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.3-SNAPSHOT</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.st-ssm.github.io</groupId>
	<artifactId>st-ssm.github.io</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<!--boot程序可以不依赖tomcat和idea，直接打包为jar然后运行-->
	<!--但是数据库是独立的，只要在jar项目中，指定好数据库连接，就可以直接使用了-->
	<!--这就是所谓的前后端分离项目-->
	<name>st-ssm.github.io</name>
	<description>st-ssm.GitHub.io project for Spring Boot</description>
	<!--复习之前学习的-->
	<!--这里继承了一个项目-->
	<!--而我们需要使用的pom依赖，在对应的项目中已经包含了，所以这里不需要再重复添加太多东西-->

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
		<!--<java.version>1.8</java.version>-->
		<!--<maven.compiler.source>1.8</maven.compiler.source>-->
		<!--<maven.compiler.target>1.8</maven.compiler.target>-->
		<java.version>17</java.version>
		<repackage.classifier/>
		<spring-native.version>0.12.1</spring-native.version>
	</properties>
	<!--跟着父项目走，直接去找上面的依赖-->
	<!--最后找到的是spring-boot-dependencies-->
	<!--所有的依赖中，已经配置好了最佳的版本号，直接在这里继承就可以直接使用-->
	<!--但是在父项目中，只是完成了配置，具体是否使用，是没有直接强制要求的-->
	<!--所以，在spring boot项目中，部分依赖是不需要指定版本的，只需要说明具体的依赖种类，就可以完成导入-->
	<dependencies>
		<!--2022年7月30日15:24:38，手动导入这个依赖项-->
		<!--才能去新建一个spring的xml配置-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>6.0.3</version>
			<!--这里不能修改context版本到6.0，否则aop会找不到class文件-->
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.9.19</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<!--spring操作数据库的包-->
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
			<version>3.0.1</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<version>3.0.1</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>3.0.1</version>
			<!--起步依赖，这里就包含了spring web和spring mvc的依赖-->
			<!--<exclusions>-->
			<!--	<exclusion>-->
			<!--		<groupId>org.springframework.boot</groupId>-->
			<!--		<artifactId>spring-boot-starter-tomcat</artifactId>-->
			<!--	</exclusion>-->
			<!--这里又回到可选依赖和排除依赖的问题-->
			<!--可选依赖是不透明的-->
			<!--排除依赖是透明的-->
			<!--我们要修改父类中的依赖，不使用tomcat，而使用jetty-->
			<!--就需要使用排除依赖-->
			<!--</exclusions>-->
		</dependency>
		<!--<dependency>-->
		<!--	<groupId>org.springframework.boot</groupId>-->
		<!--	<artifactId>spring-boot-starter-jetty</artifactId>-->
		<!--因为starter-web中是没有jetty存在的，所以这里暂时不修改启动服务器-->
		<!--</dependency>-->
		<!--相比来说，jetty更加轻量，而且拓展性更强-->
		<!--tomcat是apache的，而jetty是eclipse的-->
		<!--以后可能jetty是开发的主流-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
			<version>3.0.1</version>
		</dependency>
		<!--<dependency>-->
		<!--	&lt;!&ndash;这里是mybatis按照spring的标准，开发出来的整合包&ndash;&gt;-->
		<!--	<groupId>org.mybatis.spring.boot</groupId>-->
		<!--	<artifactId>mybatis-spring-boot-starter</artifactId>-->
		<!--	<version>3.0.1</version>-->
		<!--</dependency>-->
		<!--使用mybatis-plus以后，这些东西就不需要了-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
			<version>3.5.3.1</version>
			<!--依赖中一共两个jar包-->
			<!--一个是mybatis和spring整合包-->
			<!--一个是mybatis包-->
		</dependency>
		<!--mybatis-plus的代码生成器-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-generator</artifactId>
			<version>3.5.3.1</version>
		</dependency>
		<!--生成器对应的模板技术-->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-engine-core</artifactId>
			<version>2.3</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
			<!--必须把scope变成provide，否则会和tomcat发生冲突-->
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>6.0.3</version>
			<!--mvc是一个整合包-->
			<!--除了基础的context包以外，还会有web包作为web开发的整合包-->
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.14.1</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.experimental</groupId>
			<artifactId>spring-native</artifactId>
			<version>${spring-native.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<version>3.0.1</version>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<!--mysql的驱动-->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<version>3.0.1</version>
			<optional>true</optional>
			<!--添加以后，可以避免自动装配报错-->
		</dependency>
		<!--lombok就是便捷开发实体类的依赖-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
			<scope>provided</scope>
			<!--因为只是源代码中提供了对应的功能-->
			<!--所以其实不需要参与源代码的打包-->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<version>3.0.1</version>
			<!--<version>3.0.1</version>-->
			<!--这里的测试，实际上也是使用了依赖继承-->
			<!--最终的目的，是简化开发-->
			<!--如果这里没有直接说明，那么我们实际使用的是父项目中的依赖，直接导入就可以了-->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.2.15</version>
		</dependency>
		<!--c3p0相关包-->
		<dependency>
			<!--c3p0是一个连接池对象-->
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>
		<!--mybatis相关的包-->
		<dependency>
			<!--我不确定这个是否需要-->
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.11</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!--spring整合数据库操作的包-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>6.0.3</version>
		</dependency>
		<!--底下的是spring整合mybatis的包-->
		<!--这里，会根据mybatis的版本出现差异-->
		<!--和上课教程也不太一样，-->
		<!--这里说的是org.singledog-->
		<!--上课说的是org.mybatis-->
		<dependency>
			<groupId>org.singledog</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.3</version>
		</dependency>
		<!--下面是测试框架-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>6.0.3</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
			<version>3.0.1</version>
		</dependency>
	</dependencies>

	<build>
		<!--<resources>-->
		<!--	<resource>-->
		<!--		<directory>src/main/java</directory>-->
		<!--		<includes>-->
		<!--			<include>**/*.*</include>-->
		<!--		</includes>-->
		<!--		<excludes>-->
		<!--			<exclude>**/*.java</exclude>-->
		<!--		</excludes>-->
		<!--	</resource>-->
		<!--</resources>-->
		<!--这里有个神奇的bug，csdn说是没有扫描到对应的文件-->
		<!--所以需要添加上面的配置-->
		<!--但是我用idea自带的创建工具，就在路径下创建了一个完全相同的路径，然后在里面自动创建了一个配置文件-->
		<!--但是上面两个都是无效的-->
		<!--我使用idea自带的配置文件创建工具，直接创建对应名称对象，就解决了该问题-->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
					<classifier>${repackage.classifier}</classifier>
					<image>
						<builder>paketobuildpacks/builder:tiny</builder>
						<env>
							<BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
						</env>
					</image>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.3.0</version>
				<!--添加这个插件以后，我们就可以直接使用pom中的配置文件-->
				<!--接着，其它地方就可以解析这里的配置参数-->
				<configuration>
					<encoding>UTF-8</encoding>
					<useDefaultDelimiters>true</useDefaultDelimiters>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.experimental</groupId>
				<artifactId>spring-aot-maven-plugin</artifactId>
				<version>${spring-native.version}</version>
				<executions>
					<execution>
						<id>test-generate</id>
						<goals>
							<goal>test-generate</goal>
						</goals>
					</execution>
					<execution>
						<id>generate</id>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<!--<build>-->
	<!--下面是使用tomcat来启动项目的配置-->
	<!--因为课程中使用的是tomcat服务器-->
	<!--但是我们这里使用的是spring作为容器-->
	<!--所以先保留一下，后面自己测试的时候说不定要使用-->
	<!--	<plugins>-->
	<!--		<plugin>-->
	<!--			<groupId>org.apache.tomcat.maven</groupId>-->
	<!--			<artifactId>tomcat7-maven-plugin</artifactId>-->
	<!--			<version>2.1</version>-->
	<!--			<configuration>-->
	<!--				<port>80</port>-->
	<!--				<path>/</path>-->
	<!--			</configuration>-->
	<!--		</plugin>-->
	<!--	</plugins>-->
	<!--</build>-->
	<repositories>
		<repository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/release</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/release</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</pluginRepository>
	</pluginRepositories>

	<profiles>
		<!--下面实际上就是配置多环境运行的配置-->

		<profile>
			<id>native</id>
			<properties>
				<repackage.classifier>exec</repackage.classifier>
				<native-buildtools.version>0.9.13</native-buildtools.version>
			</properties>
			<dependencies>
				<dependency>
					<groupId>org.junit.platform</groupId>
					<artifactId>junit-platform-launcher</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.graalvm.buildtools</groupId>
						<artifactId>native-maven-plugin</artifactId>
						<version>${native-buildtools.version}</version>
						<extensions>true</extensions>
						<executions>
							<execution>
								<id>test-native</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
							</execution>
							<execution>
								<id>build-native</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
				<!--我们上面配置的文件，实际上也只能在pom文件中使用-->
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>test</spring.profiles.active>
			</properties>
		</profile>
	</profiles>

</project>
